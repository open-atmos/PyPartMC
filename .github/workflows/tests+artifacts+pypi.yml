name: tests+artifacts+pypi

defaults:
  run:
    shell: bash

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 13 * * 4'

jobs:
  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.10"]
        exclude:
          - platform: windows-latest
            python-version: "3.10"
    runs-on: ${{ matrix.platform }}
    steps:
      - if: matrix.platform == 'macos-latest'
        run: brew reinstall gcc

      - if: matrix.platform == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: false
          install: >-
            mingw-w64-x86_64-gcc-fortran
            mingw-w64-x86_64-ninja

      - if: matrix.platform == 'windows-latest'
        run: |
          echo CMAKE_ARGS="-DCMAKE_Fortran_COMPILER=D:/a/_temp/msys64/mingw64/bin/gfortran.exe" >> $GITHUB_ENV
          echo CMAKE_ARGS="-DCMAKE_C_COMPILER=D:/a/_temp/msys64/mingw64/bin/gcc.exe" >> $GITHUB_ENV
          echo CMAKE_ARGS="-DCMAKE_CXX_COMPILER=D:/a/_temp/msys64/mingw64/bin/g++.exe" >> $GITHUB_ENV
          echo CMAKE_ARGS="-DCMAKE_MAKE_PROGRAM=D:/a/_temp/msys64/mingw64/bin/ninja.exe" >> $GITHUB_ENV
          echo CMAKE_GENERATOR="Ninja" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - run: pip install pytest nbconvert ipython ipykernel build

#      - run: DEBUG=1 VERBOSE=1 pip install --verbose -e .
#
#      - run: pytest -v -s -We -p no:unraisableexception tests
#
#      - run: DEBUG=0 VERBOSE=1 pip install --verbose -e .
#
#      - run: pytest -v -s -We -p no:unraisableexception tests

      - if: matrix.platform != 'ubuntu-latest'
        run: python -m build

      - if: matrix.platform == 'ubuntu-latest'
        run: python -c "import sys; vi=sys.version_info; print(f'PV={vi.major}{vi.minor}')" >> $GITHUB_ENV

      - if: matrix.platform == 'ubuntu-latest'
        uses: RalfG/python-wheels-manylinux-build@v0.4.2
        with:
            python-versions: cp${{ env.PV }}-cp${{ env.PV }}
            build-requirements: 'numpy'

      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

#      - if: ${{ failure() }}
#        uses: mxschmitt/action-tmate@v3
#        with:
#          limit-access-to-actor: true

  dist_check:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/setup-python@v2
    - run: pip install twine auditwheel
    - uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist
    - run: twine check --strict dist/*
    - run: for i in dist/*.whl; do auditwheel show $i; done;

  dist_upload:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }} 
    needs: [dist_check]
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist
    - uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: pypi-${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
